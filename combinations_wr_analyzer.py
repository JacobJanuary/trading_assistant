#!/usr/bin/env python3
"""
Combinations Win Rate Analyzer v1.0
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º pattern_wr_analyzer.py
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–π
"""

import os
import sys
import psycopg
from psycopg.rows import dict_row
from datetime import datetime, timedelta, timezone
from decimal import Decimal
import logging
import time
from typing import List, Dict, Optional, Tuple
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('combinations_wr_analyzer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'dbname': 'fox_crypto',
    'user': 'elcrypto',
    'password': 'LohNeMamont@!21'
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
ANALYSIS_PARAMS = {
    'tp_percent': 4.0,
    'sl_percent': 3.0,
    'position_size': 100.0,
    'leverage': 5,
    'analysis_hours': 48,
    'entry_delay_minutes': 15
}


class CombinationsWinRateAnalyzer:
    def __init__(self, db_config: dict, recreate_table: bool = False):
        self.db_config = db_config
        self.recreate_table = recreate_table
        self.conn = None
        self.processed_count = 0
        self.error_count = 0
        self.new_combinations_count = 0
        self.skipped_count = 0

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            conn_string = f"host={self.db_config['host']} port={self.db_config['port']} " \
                          f"dbname={self.db_config['dbname']} user={self.db_config['user']} " \
                          f"password={self.db_config['password']}"
            self.conn = psycopg.connect(conn_string, row_factory=dict_row)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î"""
        if self.conn:
            self.conn.close()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î")

    def create_result_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            with self.conn.cursor() as cur:
                if self.recreate_table:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
                    logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã fas.test_combinations_wr...")
                    cur.execute("DROP TABLE IF EXISTS fas.test_combinations_wr CASCADE")
                    self.conn.commit()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'fas' 
                        AND table_name = 'test_combinations_wr'
                    )
                """)
                table_exists = cur.fetchone()['exists']

                if not table_exists:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                    logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã fas.test_combinations_wr...")
                    create_table_query = """
                    CREATE TABLE fas.test_combinations_wr (
                        id BIGINT PRIMARY KEY,
                        combination_id INTEGER,
                        trading_pair_id INTEGER NOT NULL,
                        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
                        timeframe VARCHAR(10) NOT NULL,
                        component_patterns JSONB NOT NULL,
                        combined_score DECIMAL(10,2) NOT NULL,
                        combined_confidence DECIMAL(10,2) NOT NULL,
                        signal_direction VARCHAR(10),
                        strength_rating VARCHAR(20),

                        -- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è SHORT
                        sell_tp BOOLEAN DEFAULT FALSE,
                        sell_sl BOOLEAN DEFAULT FALSE,
                        sell_result BOOLEAN,

                        -- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è LONG  
                        buy_tp BOOLEAN DEFAULT FALSE,
                        buy_sl BOOLEAN DEFAULT FALSE,
                        buy_result BOOLEAN,

                        -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        processed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    )
                    """
                    cur.execute(create_table_query)

                    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                    cur.execute("""
                        CREATE INDEX idx_combinations_wr_strength 
                        ON fas.test_combinations_wr(strength_rating)
                    """)
                    cur.execute("""
                        CREATE INDEX idx_combinations_wr_combination 
                        ON fas.test_combinations_wr(combination_id)
                    """)

                    self.conn.commit()
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ fas.test_combinations_wr —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ fas.test_combinations_wr —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            self.conn.rollback()
            raise

    def get_unprocessed_combinations(self, batch_size: int = 10000) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤"""
        query = """
            SELECT 
                cs.id,
                cs.combination_id,
                cs.trading_pair_id,
                cs.timestamp,
                cs.timeframe::TEXT as timeframe,
                cs.component_patterns,
                cs.combined_score,
                cs.combined_confidence,
                cs.signal_direction,
                cs.strength_rating,
                tp.pair_symbol
            FROM fas.combined_signals cs
            JOIN public.trading_pairs tp ON cs.trading_pair_id = tp.id
            WHERE cs.timestamp <= NOW() - INTERVAL '48 hours'
                AND NOT EXISTS (
                    SELECT 1 FROM fas.test_combinations_wr tcw
                    WHERE tcw.id = cs.id
                )
            ORDER BY cs.timestamp ASC
            LIMIT %s
        """

        with self.conn.cursor() as cur:
            cur.execute(query, (batch_size,))
            combinations = cur.fetchall()

        return combinations

    def get_total_unprocessed_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
        query = """
            SELECT COUNT(*) as count
            FROM fas.combined_signals cs
            WHERE cs.timestamp <= NOW() - INTERVAL '48 hours'
                AND NOT EXISTS (
                    SELECT 1 FROM fas.test_combinations_wr tcw
                    WHERE tcw.id = cs.id
                )
        """

        with self.conn.cursor() as cur:
            cur.execute(query)
            result = cur.fetchone()
            return result['count'] if result else 0

    def get_entry_price(self, trading_pair_id: int, signal_time: datetime,
                        signal_type: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ signal_time + 15 –º–∏–Ω—É—Ç"""
        entry_time = signal_time + timedelta(minutes=ANALYSIS_PARAMS['entry_delay_minutes'])

        query = """
            SELECT 
                timestamp,
                close_price,
                high_price,
                low_price
            FROM fas.market_data_aggregated
            WHERE trading_pair_id = %s
                AND timeframe = '15m'
                AND timestamp >= %s
            ORDER BY timestamp ASC
            LIMIT 1
        """

        try:
            with self.conn.cursor() as cur:
                cur.execute(query, (trading_pair_id, entry_time))
                result = cur.fetchone()

            if result:
                # –î–ª—è LONG –∏—Å–ø–æ–ª—å–∑—É–µ–º high_price (—Ö—É–¥—à–∏–π –≤—Ö–æ–¥), –¥–ª—è SHORT - low_price
                if signal_type == 'LONG':
                    entry_price = float(result['high_price'])
                else:  # SHORT
                    entry_price = float(result['low_price'])

                return {
                    'entry_price': entry_price,
                    'entry_time': result['timestamp']
                }
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: {e}")
            return None

    def analyze_position(self, signal_type: str, entry_price: float,
                         history: List[Dict], actual_entry_time) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        tp_percent = ANALYSIS_PARAMS['tp_percent']
        sl_percent = ANALYSIS_PARAMS['sl_percent']

        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π TP –∏ SL
        if signal_type == 'LONG':
            tp_price = entry_price * (1 + tp_percent / 100)
            sl_price = entry_price * (1 - sl_percent / 100)
        else:  # SHORT
            tp_price = entry_price * (1 - tp_percent / 100)
            sl_price = entry_price * (1 + sl_percent / 100)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = None
        tp_hit = False
        sl_hit = False

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        for candle in history:
            high_price = float(candle['high_price'])
            low_price = float(candle['low_price'])

            if signal_type == 'LONG':
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL
                if low_price <= sl_price:
                    result = False
                    sl_hit = True
                    break
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º TP
                elif high_price >= tp_price:
                    result = True
                    tp_hit = True
                    break
            else:  # SHORT
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL
                if high_price >= sl_price:
                    result = False
                    sl_hit = True
                    break
                # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º TP
                elif low_price <= tp_price:
                    result = True
                    tp_hit = True
                    break

        return {
            'result': result,
            'tp': tp_hit,
            'sl': sl_hit
        }

    def analyze_combination(self, combination: Dict) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            base_result = {
                'id': combination['id'],
                'combination_id': combination['combination_id'],
                'trading_pair_id': combination['trading_pair_id'],
                'timestamp': combination['timestamp'],
                'timeframe': combination['timeframe'],
                'component_patterns': combination['component_patterns'],
                'combined_score': float(combination['combined_score']),
                'combined_confidence': float(combination['combined_confidence']),
                'signal_direction': combination['signal_direction'],
                'strength_rating': combination['strength_rating'],
                'sell_tp': False,
                'sell_sl': False,
                'sell_result': None,
                'buy_tp': False,
                'buy_sl': False,
                'buy_result': None
            }

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –¥–ª—è LONG
            long_entry_data = self.get_entry_price(
                combination['trading_pair_id'],
                combination['timestamp'],
                'LONG'
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –¥–ª—è SHORT
            short_entry_data = self.get_entry_price(
                combination['trading_pair_id'],
                combination['timestamp'],
                'SHORT'
            )

            if not long_entry_data or not short_entry_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ {combination['id']}")
                self.skipped_count += 1
                return base_result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å NULL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∑–∞ 48 —á–∞—Å–æ–≤
            history_query = """
                SELECT 
                    timestamp,
                    close_price,
                    high_price,
                    low_price
                FROM fas.market_data_aggregated
                WHERE trading_pair_id = %s
                    AND timeframe = '15m'
                    AND timestamp >= %s
                    AND timestamp <= %s + INTERVAL '48 hours'
                ORDER BY timestamp ASC
            """

            with self.conn.cursor() as cur:
                cur.execute(history_query, (
                    combination['trading_pair_id'],
                    long_entry_data['entry_time'],
                    long_entry_data['entry_time']
                ))
                history = cur.fetchall()

            if not history or len(history) < 10:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ {combination['id']}")
                self.skipped_count += 1
                return base_result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å NULL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º LONG –ø–æ–∑–∏—Ü–∏—é
            long_results = self.analyze_position(
                'LONG',
                long_entry_data['entry_price'],
                history[1:],  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É
                long_entry_data['entry_time']
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é
            short_results = self.analyze_position(
                'SHORT',
                short_entry_data['entry_price'],
                history[1:],
                short_entry_data['entry_time']
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            base_result['sell_tp'] = short_results['tp']
            base_result['sell_sl'] = short_results['sl']
            base_result['sell_result'] = short_results['result']
            base_result['buy_tp'] = long_results['tp']
            base_result['buy_sl'] = long_results['sl']
            base_result['buy_result'] = long_results['result']

            return base_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ {combination['id']}: {e}")
            self.error_count += 1
            return None

    def save_results(self, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î"""
        if not results:
            return

        insert_query = """
            INSERT INTO fas.test_combinations_wr (
                id, combination_id, trading_pair_id, timestamp, timeframe,
                component_patterns, combined_score, combined_confidence,
                signal_direction, strength_rating,
                sell_tp, sell_sl, sell_result,
                buy_tp, buy_sl, buy_result
            ) VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (id) DO UPDATE SET
                sell_result = EXCLUDED.sell_result,
                buy_result = EXCLUDED.buy_result,
                processed_at = NOW()
        """

        saved_count = 0

        with self.conn.cursor() as cur:
            for result in results:
                try:
                    import json
                    cur.execute(insert_query, (
                        result['id'],
                        result['combination_id'],
                        result['trading_pair_id'],
                        result['timestamp'],
                        result['timeframe'],
                        json.dumps(result['component_patterns']) if result['component_patterns'] else None,
                        result['combined_score'],
                        result['combined_confidence'],
                        result['signal_direction'],
                        result['strength_rating'],
                        result['sell_tp'],
                        result['sell_sl'],
                        result['sell_result'],
                        result['buy_tp'],
                        result['buy_sl'],
                        result['buy_result']
                    ))
                    saved_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ {result['id']}: {e}")
                    self.error_count += 1

        self.conn.commit()
        self.new_combinations_count += saved_count
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ {len(results)}")

    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
            stats_query = """
                WITH combination_stats AS (
                    SELECT 
                        strength_rating,
                        COUNT(*) as total_combinations,
                        COUNT(CASE WHEN buy_result = true THEN 1 END) as long_wins,
                        COUNT(CASE WHEN buy_result = false THEN 1 END) as long_losses,
                        COUNT(CASE WHEN sell_result = true THEN 1 END) as short_wins,
                        COUNT(CASE WHEN sell_result = false THEN 1 END) as short_losses
                    FROM fas.test_combinations_wr
                    WHERE processed_at >= NOW() - INTERVAL '1 day'
                    GROUP BY strength_rating
                    ORDER BY total_combinations DESC
                )
                SELECT * FROM combination_stats
            """

            with self.conn.cursor() as cur:
                cur.execute(stats_query)
                combination_stats = cur.fetchall()

            logger.info("\n" + "=" * 70)
            logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WIN RATE –ü–û –ö–û–ú–ë–ò–ù–ê–¶–ò–Ø–ú")
            logger.info("=" * 70)

            for stat in combination_stats:
                strength = stat['strength_rating'] or 'UNKNOWN'
                total = stat['total_combinations']

                long_total = stat['long_wins'] + stat['long_losses']
                long_wr = (stat['long_wins'] / long_total * 100) if long_total > 0 else 0

                short_total = stat['short_wins'] + stat['short_losses']
                short_wr = (stat['short_wins'] / short_total * 100) if short_total > 0 else 0

                logger.info(f"\nüìà –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {strength}")
                logger.info(f"   –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total}")
                logger.info(f"   ‚îú‚îÄ LONG Win Rate: {long_wr:.1f}% ({stat['long_wins']}/{long_total})")
                logger.info(f"   ‚îî‚îÄ SHORT Win Rate: {short_wr:.1f}% ({stat['short_wins']}/{short_total})")

            # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å–æ—Ä)
            direction_query = """
                SELECT 
                    signal_direction,
                    COUNT(*) as total_signals,
                    COUNT(CASE WHEN 
                        (signal_direction = 'BUY' AND buy_result = true) OR 
                        (signal_direction = 'SELL' AND sell_result = true) 
                    THEN 1 END) as correct_predictions,
                    COUNT(CASE WHEN 
                        (signal_direction = 'BUY' AND buy_result = false) OR 
                        (signal_direction = 'SELL' AND sell_result = false) 
                    THEN 1 END) as wrong_predictions
                FROM fas.test_combinations_wr
                WHERE processed_at >= NOW() - INTERVAL '1 day'
                    AND signal_direction IS NOT NULL
                GROUP BY signal_direction
            """

            with self.conn.cursor() as cur2:
                cur2.execute(direction_query)
                direction_stats = cur2.fetchall()

            if direction_stats:
                logger.info("\n" + "=" * 70)
                logger.info("üìä –¢–û–ß–ù–û–°–¢–¨ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø")
                logger.info("=" * 70)

                for stat in direction_stats:
                    direction = stat['signal_direction']
                    total = stat['correct_predictions'] + stat['wrong_predictions']
                    if total > 0:
                        accuracy = (stat['correct_predictions'] / total) * 100
                        logger.info(f"{direction}: {accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å ({stat['correct_predictions']}/{total})")

            logger.info("=" * 70)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
        start_time = datetime.now()
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")
        logger.info(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: TP={ANALYSIS_PARAMS['tp_percent']}%, SL={ANALYSIS_PARAMS['sl_percent']}%")

        try:
            self.connect()
            logger.info("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            self.create_result_table()

            logger.info("üîç –ü–æ–¥—Å—á–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
            total_unprocessed = self.get_total_unprocessed_count()

            if total_unprocessed == 0:
                logger.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            logger.info(f"üìä –í—Å–µ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total_unprocessed}")

            batch_size = 10000
            save_batch_size = 100
            batch_number = 0

            while True:
                batch_number += 1
                logger.info(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
                current_unprocessed = self.get_total_unprocessed_count()

                if current_unprocessed == 0:
                    logger.info("‚úÖ –í—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                    break

                logger.info(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ #{batch_number}")
                logger.info(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {current_unprocessed}")

                logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–¥–æ {batch_size} —à—Ç—É–∫)...")
                combinations = self.get_unprocessed_combinations(batch_size)

                if not combinations:
                    logger.info(f"‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    break

                logger.info(f"üìä –í –ø–∞–∫–µ—Ç–µ #{batch_number}: {len(combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")

                # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID –ø–µ—Ä–≤—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                if len(combinations) <= 30:
                    combination_ids = [c['id'] for c in combinations]
                    logger.info(f"üîç ID –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ: {combination_ids}")

                results = []
                batch_processed = 0
                batch_skipped = 0

                for i, combination in enumerate(combinations):
                    if i % 100 == 0 and i > 0:
                        progress = (i / len(combinations)) * 100
                        logger.info(f"‚è≥ –ü–∞–∫–µ—Ç #{batch_number}: {i}/{len(combinations)} ({progress:.1f}%)")

                    result = self.analyze_combination(combination)
                    if result:
                        results.append(result)
                        batch_processed += 1
                        self.processed_count += 1
                    else:
                        batch_skipped += 1

                    if len(results) >= save_batch_size:
                        self.save_results(results)
                        results = []

                if results:
                    self.save_results(results)

                logger.info(f"‚úÖ –ü–∞–∫–µ—Ç #{batch_number} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {batch_processed} —É—Å–ø–µ—à–Ω–æ, {batch_skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")

                # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
                if batch_processed == 0 and batch_skipped == 0:
                    logger.error(f"‚ùå –ü–∞–∫–µ—Ç #{batch_number} –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π! –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
                    break

                if current_unprocessed > batch_size:
                    time.sleep(2)

            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            logger.info("\n" + "=" * 70)
            logger.info("üìã –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
            logger.info("=" * 70)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_count}")
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.new_combinations_count}")
            logger.info(f"‚≠ï –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.skipped_count}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.error_count}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥ ({duration / 60:.1f} –º–∏–Ω—É—Ç)")

            if self.processed_count > 0:
                logger.info(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.processed_count / duration:.1f} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π/—Å–µ–∫")

            logger.info("=" * 70)

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_statistics()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            logger.error(traceback.format_exc())
            raise
        finally:
            self.disconnect()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # recreate_table=False - –ù–ï —É–¥–∞–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É!
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        analyzer = CombinationsWinRateAnalyzer(DB_CONFIG, recreate_table=False)
        analyzer.run()
    except KeyboardInterrupt:
        logger.info("\n‚õî –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()