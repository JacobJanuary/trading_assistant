#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è cron
–ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É: * * * * * /path/to/venv/bin/python /path/to/monitor_signals.py
"""

import os
import sys
from datetime import datetime
from database import Database
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
env_path = BASE_DIR / '.env'
load_dotenv(env_path)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database
sys.path.insert(0, str(BASE_DIR))

from database import Database

def monitor_signals():
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¢–û–õ–¨–ö–û –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    """
    db = Database(
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT'),
        database=os.getenv('DB_NAME'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD')
    )

    print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print(
        f"[DEBUG] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {os.getenv('DB_USER')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        query = """
            SELECT 
                ws.*,
                tp.id as trading_pair_id
            FROM web.web_signals ws
            JOIN public.trading_pairs tp ON tp.pair_symbol = ws.pair_symbol  -- –ò–°–ü–†–ê–í–õ–ï–ù–û!
                AND tp.contract_type_id = 1
                AND tp.exchange_id = 1
            WHERE ws.is_closed = FALSE
        """

        open_positions = db.execute_query(query, fetch=True)

        if not open_positions:
            print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(open_positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        closed_count = 0
        updated_count = 0

        for position in open_positions:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
                price_query = """
                    SELECT mark_price, capture_time
                    FROM public.market_data
                    WHERE trading_pair_id = %s
                    ORDER BY capture_time DESC
                    LIMIT 1
                """

                price_data = db.execute_query(
                    price_query,
                    (position['trading_pair_id'],),
                    fetch=True
                )

                if not price_data:
                    continue

                current_price = float(price_data[0]['mark_price'])
                current_time = price_data[0]['capture_time']
                entry_price = float(position['entry_price'])
                position_size = float(position['position_size_usd'])
                leverage = position['leverage']
                tp_percent = float(position['take_profit_percent'])
                sl_percent = float(position['trailing_stop_percent'])

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                if position['signal_action'] in ['SELL', 'SHORT']:
                    profit_percent = ((entry_price - current_price) / entry_price) * 100
                else:
                    profit_percent = ((current_price - entry_price) / entry_price) * 100

                pnl_usd = position_size * (profit_percent / 100) * leverage

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
                current_max = float(position['max_potential_profit_usd'] or 0)
                new_max = max(current_max, pnl_usd)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP
                if profit_percent >= tp_percent:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ Take Profit
                    close_query = """
                        UPDATE web.web_signals
                        SET is_closed = TRUE,
                            closing_price = %s,
                            closed_at = %s,
                            close_reason = 'take_profit',
                            realized_pnl_usd = %s,
                            unrealized_pnl_usd = 0,
                            max_potential_profit_usd = %s,
                            last_updated_at = NOW()
                        WHERE signal_id = %s
                    """
                    db.execute_query(close_query, (
                        current_price, current_time, pnl_usd, new_max, position['signal_id']
                    ))
                    closed_count += 1
                    print(f"‚úÖ TP: {position['pair_symbol']} –∑–∞–∫—Ä—ã—Ç —Å –ø—Ä–∏–±—ã–ª—å—é {pnl_usd:.2f}")

                elif profit_percent <= -sl_percent:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ Stop Loss
                    close_query = """
                        UPDATE web.web_signals
                        SET is_closed = TRUE,
                            closing_price = %s,
                            closed_at = %s,
                            close_reason = 'stop_loss',
                            realized_pnl_usd = %s,
                            unrealized_pnl_usd = 0,
                            max_potential_profit_usd = %s,
                            last_updated_at = NOW()
                        WHERE signal_id = %s
                    """
                    db.execute_query(close_query, (
                        current_price, current_time, pnl_usd, new_max, position['signal_id']
                    ))
                    closed_count += 1
                    print(f"üõë SL: {position['pair_symbol']} –∑–∞–∫—Ä—ã—Ç —Å —É–±—ã—Ç–∫–æ–º {pnl_usd:.2f}")

                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
                    update_query = """
                        UPDATE web.web_signals
                        SET unrealized_pnl_usd = %s,
                            last_known_price = %s,
                            max_potential_profit_usd = %s,
                            last_updated_at = NOW()
                        WHERE signal_id = %s
                    """
                    db.execute_query(update_query, (
                        pnl_usd, current_price, new_max, position['signal_id']
                    ))
                    updated_count += 1

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {position['pair_symbol']}: {e}")
                continue

        print(f"[{datetime.now()}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –∑–∞–∫—Ä—ã—Ç–æ {closed_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    monitor_signals()