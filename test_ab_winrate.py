"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Win Rate –≤ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
"""
import psycopg2
from psycopg2.extras import RealDictCursor
import os
from dotenv import load_dotenv

load_dotenv()

def test_ab_winrate():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Win Rate –¥–ª—è trailing stop –≤ A/B —Ç–µ—Å—Ç–µ"""
    
    db_config = {
        'host': os.getenv('DB_HOST'),
        'port': os.getenv('DB_PORT', '5432'),
        'database': os.getenv('DB_NAME'),
        'user': os.getenv('DB_USER')
        # password –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .pgpass
    }
    
    print("="*60)
    print("–¢–ï–°–¢ WIN RATE –í A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("="*60)
    
    try:
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ trailing stop
        cur.execute("""
            SELECT 
                close_reason,
                COUNT(*) as count,
                SUM(CASE WHEN realized_pnl_usd > 0 THEN 1 ELSE 0 END) as profitable,
                SUM(CASE WHEN realized_pnl_usd <= 0 THEN 1 ELSE 0 END) as losses,
                SUM(realized_pnl_usd) as total_pnl
            FROM web.web_signals
            WHERE is_closed = true
                AND signal_timestamp >= NOW() - INTERVAL '30 days'
            GROUP BY close_reason
            ORDER BY count DESC
        """)
        
        results = cur.fetchall()
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ó–ê–ö–†–´–¢–ò–Ø:")
        
        total_wins = 0
        total_losses = 0
        total_pnl = 0
        
        for r in results:
            reason = r['close_reason'] or 'unknown'
            print(f"\n{reason}:")
            print(f"  –í—Å–µ–≥–æ: {r['count']}")
            print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {r['profitable']}")
            print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {r['losses']}")
            print(f"  P&L: ${r['total_pnl']:.2f}")
            
            if reason == 'take_profit':
                total_wins += r['count']
            elif reason == 'stop_loss':
                total_losses += r['count']
            elif reason == 'trailing_stop':
                total_wins += r['profitable']
                total_losses += r['losses']
            
            total_pnl += r['total_pnl']
        
        print("\n‚úÖ –ò–¢–û–ì–û–í–´–ô –†–ê–°–ß–ï–¢ WIN RATE:")
        print(f"  –í—Å–µ–≥–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {total_wins}")
        print(f"  –í—Å–µ–≥–æ —É–±—ã—Ç–æ—á–Ω—ã—Ö: {total_losses}")
        print(f"  –û–±—â–∏–π P&L: ${total_pnl:.2f}")
        
        total_closed = total_wins + total_losses
        if total_closed > 0:
            win_rate = (total_wins / total_closed) * 100
            print(f"  WIN RATE: {win_rate:.1f}%")
        else:
            print(f"  WIN RATE: –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è trailing_stop
        cur.execute("""
            SELECT 
                COUNT(*) as total_trailing,
                COUNT(CASE WHEN realized_pnl_usd > 0 THEN 1 END) as trailing_profitable,
                COUNT(CASE WHEN realized_pnl_usd <= 0 THEN 1 END) as trailing_loss,
                AVG(realized_pnl_usd) as avg_pnl,
                SUM(realized_pnl_usd) as total_pnl
            FROM web.web_signals
            WHERE close_reason = 'trailing_stop'
                AND signal_timestamp >= NOW() - INTERVAL '30 days'
        """)
        
        trailing = cur.fetchone()
        
        if trailing and trailing['total_trailing'] > 0:
            print(f"\nüéØ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø TRAILING STOP:")
            print(f"  –í—Å–µ–≥–æ trailing: {trailing['total_trailing']}")
            print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {trailing['trailing_profitable']}")
            print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {trailing['trailing_loss']}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π P&L: ${trailing['avg_pnl']:.2f}")
            print(f"  –û–±—â–∏–π P&L: ${trailing['total_pnl']:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            if trailing['total_pnl'] > 0 and trailing['trailing_profitable'] == 0:
                print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π P&L –Ω–æ 0 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!")
                print("   –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ø–æ–¥—Å—á–µ—Ç–µ trailing_profitable")
        
        cur.close()
        conn.close()
        
        print("\n" + "="*60)
        print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("="*60)
        print("""
1. –ï—Å–ª–∏ Win Rate = 0% –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º P&L:
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ trailing_profitable –≤ –ë–î
   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ process_scoring_signals_batch –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ stats
   
2. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ app.py –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
   print(f"Stats B: {stats_b}")
   
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è close_reason='trailing_stop'
""")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_ab_winrate()