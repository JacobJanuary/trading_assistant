"""
–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
"""
import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

def apply_analysis_cache_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    
    db_config = {
        'host': os.getenv('DB_HOST'),
        'port': os.getenv('DB_PORT', '5432'),
        'database': os.getenv('DB_NAME'),
        'user': os.getenv('DB_USER')
        # password –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .pgpass
    }
    
    try:
        conn = psycopg2.connect(**db_config)
        cur = conn.cursor()
        
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        cur.execute("""
            CREATE TABLE IF NOT EXISTS web.analysis_progress (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                analysis_type VARCHAR(50) NOT NULL,
                parameters JSONB NOT NULL,
                last_processed_combination INTEGER DEFAULT 0,
                total_combinations INTEGER NOT NULL,
                results JSONB,
                completed BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                UNIQUE(user_id, analysis_type)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ web.analysis_progress —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_analysis_progress_user_type 
            ON web.analysis_progress(user_id, analysis_type)
        """)
        print("‚úÖ –ò–Ω–¥–µ–∫—Å idx_analysis_progress_user_type —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        cur.execute("""
            CREATE OR REPLACE FUNCTION update_analysis_progress_updated_at()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = NOW();
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql
        """)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è update_analysis_progress_updated_at —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        cur.execute("""
            DROP TRIGGER IF EXISTS update_analysis_progress_updated_at ON web.analysis_progress
        """)
        cur.execute("""
            CREATE TRIGGER update_analysis_progress_updated_at
            BEFORE UPDATE ON web.analysis_progress
            FOR EACH ROW
            EXECUTE FUNCTION update_analysis_progress_updated_at()
        """)
        print("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä update_analysis_progress_updated_at —Å–æ–∑–¥–∞–Ω")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cur.execute("""
            DELETE FROM web.analysis_progress 
            WHERE completed = FALSE 
            AND updated_at < NOW() - INTERVAL '24 hours'
        """)
        deleted = cur.rowcount
        if deleted > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        cur.execute("""
            SELECT COUNT(*) as total,
                   COUNT(CASE WHEN completed THEN 1 END) as completed,
                   COUNT(CASE WHEN NOT completed THEN 1 END) as in_progress
            FROM web.analysis_progress
        """)
        stats = cur.fetchone()
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ analysis_progress:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats[0]}")
        print(f"  –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats[1]}")
        print(f"  –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats[2]}")
        
        cur.close()
        conn.close()
        
        print("\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        print("–¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å")
        print("—Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    apply_analysis_cache_table()