#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ Trading Assistant
–ê–≤—Ç–æ—Ä: Trading Assistant Audit System
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-09-03
"""

import os
import sys
import psycopg2
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime, timedelta
from dotenv import load_dotenv
import json
import traceback

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TradingCalculationsAuditor:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        self.connection = None
        self.cursor = None
        self.errors = []
        self.warnings = []
        self.test_results = {
            'total_tests': 0,
            'passed': 0,
            'failed': 0,
            'warnings': 0
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.COMMISSION_RATE = Decimal('0.001')  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
        self.TOLERANCE = Decimal('0.01')  # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        
    def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–±—É–µ–º DATABASE_URL
            database_url = os.getenv('DATABASE_URL')
            if database_url:
                self.connection = psycopg2.connect(database_url)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.connection = psycopg2.connect(
                    host=os.getenv('DB_HOST'),
                    port=os.getenv('DB_PORT', '5432'),
                    database=os.getenv('DB_NAME'),
                    user=os.getenv('DB_USER'),
                    password=os.getenv('DB_PASSWORD')
                )
            self.cursor = self.connection.cursor()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
    
    def close_db(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        if self.cursor:
            self.cursor.close()
        if self.connection:
            self.connection.close()
    
    def run_test(self, test_name, test_function):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.test_results['total_tests'] += 1
        try:
            print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
            result = test_function()
            if result:
                self.test_results['passed'] += 1
                print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω")
            else:
                self.test_results['failed'] += 1
                print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω")
            return result
        except Exception as e:
            self.test_results['failed'] += 1
            self.errors.append(f"{test_name}: {str(e)}")
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
            traceback.print_exc()
            return False
    
    def test_pnl_calculation_long(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ P&L –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã P&L –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_cases = [
            {
                'entry_price': Decimal('100'),
                'exit_price': Decimal('110'),
                'position_size': Decimal('1000'),
                'leverage': 10,
                'expected_pnl': Decimal('1000'),  # ((110-100)/100) * 1000 * 10 = 1000
                'description': '–ü—Ä–∏–±—ã–ª—å–Ω–∞—è LONG –ø–æ–∑–∏—Ü–∏—è (+10%)'
            },
            {
                'entry_price': Decimal('100'),
                'exit_price': Decimal('90'),
                'position_size': Decimal('1000'),
                'leverage': 10,
                'expected_pnl': Decimal('-1000'),  # ((90-100)/100) * 1000 * 10 = -1000
                'description': '–£–±—ã—Ç–æ—á–Ω–∞—è LONG –ø–æ–∑–∏—Ü–∏—è (-10%)'
            },
            {
                'entry_price': Decimal('50000'),
                'exit_price': Decimal('51000'),
                'position_size': Decimal('100'),
                'leverage': 5,
                'expected_pnl': Decimal('10'),  # (51000-50000)/50000 * 100 * 5 = 10
                'description': 'BTC LONG —Å –º–∞–ª–æ–π –ø–æ–∑–∏—Ü–∏–µ–π'
            }
        ]
        
        all_passed = True
        for case in test_cases:
            # –†–∞—Å—á–µ—Ç P&L –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (exit_price - entry_price) / entry_price * position_size * leverage
            actual_pnl = ((case['exit_price'] - case['entry_price']) / case['entry_price'] * 
                         case['position_size'] * case['leverage'])
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (–æ—Ç–∫—Ä—ã—Ç–∏–µ + –∑–∞–∫—Ä—ã—Ç–∏–µ)
            commission = case['position_size'] * self.COMMISSION_RATE * 2
            actual_pnl_with_commission = actual_pnl - commission
            
            print(f"    üìù {case['description']}:")
            print(f"       Entry: ${case['entry_price']}, Exit: ${case['exit_price']}")
            print(f"       Position: ${case['position_size']}, Leverage: {case['leverage']}x")
            print(f"       –†–∞—Å—á–µ—Ç–Ω—ã–π P&L: ${actual_pnl:.2f}")
            print(f"       P&L —Å –∫–æ–º–∏—Å—Å–∏–µ–π: ${actual_pnl_with_commission:.2f}")
            print(f"       –û–∂–∏–¥–∞–µ–º—ã–π P&L: ${case['expected_pnl']:.2f}")
            
            if abs(actual_pnl - case['expected_pnl']) > self.TOLERANCE:
                print(f"       ‚ùå –û–®–ò–ë–ö–ê: –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {abs(actual_pnl - case['expected_pnl']):.2f}")
                all_passed = False
            else:
                print(f"       ‚úÖ OK")
        
        return all_passed
    
    def test_pnl_calculation_short(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ P&L –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—É–ª—ã P&L –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π...")
        
        test_cases = [
            {
                'entry_price': Decimal('100'),
                'exit_price': Decimal('90'),
                'position_size': Decimal('1000'),
                'leverage': 10,
                'expected_pnl': Decimal('1000'),  # (100-90)/100 * 1000 * 10 = 1000
                'description': '–ü—Ä–∏–±—ã–ª—å–Ω–∞—è SHORT –ø–æ–∑–∏—Ü–∏—è (+10%)'
            },
            {
                'entry_price': Decimal('100'),
                'exit_price': Decimal('110'),
                'position_size': Decimal('1000'),
                'leverage': 10,
                'expected_pnl': Decimal('-1000'),  # (100-110)/100 * 1000 * 10 = -1000
                'description': '–£–±—ã—Ç–æ—á–Ω–∞—è SHORT –ø–æ–∑–∏—Ü–∏—è (-10%)'
            }
        ]
        
        all_passed = True
        for case in test_cases:
            # –†–∞—Å—á–µ—Ç P&L –¥–ª—è SHORT: (entry_price - exit_price) / entry_price * position_size * leverage
            actual_pnl = ((case['entry_price'] - case['exit_price']) / case['entry_price'] * 
                         case['position_size'] * case['leverage'])
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            commission = case['position_size'] * self.COMMISSION_RATE * 2
            actual_pnl_with_commission = actual_pnl - commission
            
            print(f"    üìù {case['description']}:")
            print(f"       Entry: ${case['entry_price']}, Exit: ${case['exit_price']}")
            print(f"       Position: ${case['position_size']}, Leverage: {case['leverage']}x")
            print(f"       –†–∞—Å—á–µ—Ç–Ω—ã–π P&L: ${actual_pnl:.2f}")
            print(f"       P&L —Å –∫–æ–º–∏—Å—Å–∏–µ–π: ${actual_pnl_with_commission:.2f}")
            print(f"       –û–∂–∏–¥–∞–µ–º—ã–π P&L: ${case['expected_pnl']:.2f}")
            
            if abs(actual_pnl - case['expected_pnl']) > self.TOLERANCE:
                print(f"       ‚ùå –û–®–ò–ë–ö–ê: –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {abs(actual_pnl - case['expected_pnl']):.2f}")
                all_passed = False
            else:
                print(f"       ‚úÖ OK")
        
        return all_passed
    
    def test_trailing_stop_logic(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ Trailing Stop"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ Trailing Stop...")
        
        test_cases = [
            {
                'entry_price': Decimal('100'),
                'max_price': Decimal('110'),
                'activation_pct': Decimal('2'),  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ +2%
                'distance_pct': Decimal('1'),    # –î–∏—Å—Ç–∞–Ω—Ü–∏—è 1% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
                'current_price': Decimal('108.9'),
                'should_activate': True,
                'should_trigger': True,
                'description': 'Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å—Ä–∞–±–æ—Ç–∞–ª'
            },
            {
                'entry_price': Decimal('100'),
                'max_price': Decimal('101.5'),
                'activation_pct': Decimal('2'),
                'distance_pct': Decimal('1'),
                'current_price': Decimal('101'),
                'should_activate': False,
                'should_trigger': False,
                'description': 'Trailing Stop –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—Ñ–∏—Ç < 2%)'
            },
            {
                'entry_price': Decimal('100'),
                'max_price': Decimal('105'),
                'activation_pct': Decimal('2'),
                'distance_pct': Decimal('1'),
                'current_price': Decimal('104.5'),
                'should_activate': True,
                'should_trigger': False,
                'description': 'Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª'
            }
        ]
        
        all_passed = True
        for case in test_cases:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            profit_pct = ((case['max_price'] - case['entry_price']) / case['entry_price'] * 100)
            is_activated = profit_pct >= case['activation_pct']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            trigger_price = case['max_price'] * (1 - case['distance_pct'] / 100)
            is_triggered = is_activated and case['current_price'] <= trigger_price
            
            print(f"    üìù {case['description']}:")
            print(f"       Entry: ${case['entry_price']}, Max: ${case['max_price']}, Current: ${case['current_price']}")
            print(f"       Activation: {case['activation_pct']}%, Distance: {case['distance_pct']}%")
            print(f"       –ü—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ: {profit_pct:.2f}%")
            print(f"       –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: ${trigger_price:.2f}")
            print(f"       –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {is_activated} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {case['should_activate']})")
            print(f"       –°—Ä–∞–±–æ—Ç–∞–ª: {is_triggered} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {case['should_trigger']})")
            
            if is_activated != case['should_activate'] or is_triggered != case['should_trigger']:
                print(f"       ‚ùå –û–®–ò–ë–ö–ê: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ")
                all_passed = False
            else:
                print(f"       ‚úÖ OK")
        
        return all_passed
    
    def test_stop_loss_take_profit(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π Stop Loss –∏ Take Profit"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ SL/TP —É—Ä–æ–≤–Ω–µ–π...")
        
        test_cases = [
            {
                'entry_price': Decimal('100'),
                'sl_percent': Decimal('3'),
                'tp_percent': Decimal('5'),
                'action': 'LONG',
                'expected_sl': Decimal('97'),     # 100 * (1 - 0.03)
                'expected_tp': Decimal('105'),    # 100 * (1 + 0.05)
                'description': 'LONG –ø–æ–∑–∏—Ü–∏—è'
            },
            {
                'entry_price': Decimal('100'),
                'sl_percent': Decimal('3'),
                'tp_percent': Decimal('5'),
                'action': 'SHORT',
                'expected_sl': Decimal('103'),    # 100 * (1 + 0.03)
                'expected_tp': Decimal('95'),     # 100 * (1 - 0.05)
                'description': 'SHORT –ø–æ–∑–∏—Ü–∏—è'
            }
        ]
        
        all_passed = True
        for case in test_cases:
            if case['action'] == 'LONG':
                actual_sl = case['entry_price'] * (1 - case['sl_percent'] / 100)
                actual_tp = case['entry_price'] * (1 + case['tp_percent'] / 100)
            else:  # SHORT
                actual_sl = case['entry_price'] * (1 + case['sl_percent'] / 100)
                actual_tp = case['entry_price'] * (1 - case['tp_percent'] / 100)
            
            print(f"    üìù {case['description']}:")
            print(f"       Entry: ${case['entry_price']}, Action: {case['action']}")
            print(f"       SL%: {case['sl_percent']}%, TP%: {case['tp_percent']}%")
            print(f"       –†–∞—Å—á–µ—Ç–Ω—ã–π SL: ${actual_sl:.2f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${case['expected_sl']})")
            print(f"       –†–∞—Å—á–µ—Ç–Ω—ã–π TP: ${actual_tp:.2f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${case['expected_tp']})")
            
            if (abs(actual_sl - case['expected_sl']) > self.TOLERANCE or 
                abs(actual_tp - case['expected_tp']) > self.TOLERANCE):
                print(f"       ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π")
                all_passed = False
            else:
                print(f"       ‚úÖ OK")
        
        return all_passed
    
    def test_database_signals(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞
            query = """
                SELECT 
                    signal_id,
                    pair_symbol as coin,
                    signal_action,
                    entry_price,
                    close_price as exit_price,
                    close_reason,
                    pnl_usd as realized_pnl_usd,
                    pnl_percent as realized_pnl_percent,
                    100.0 as position_size,  -- –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    5 as leverage,            -- –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    4.0 as take_profit_percent,
                    3.0 as stop_loss_percent,
                    2.0 as trailing_stop_percent,
                    false as use_trailing_stop
                FROM web.scoring_analysis_temp
                WHERE is_closed = true
                    AND close_price IS NOT NULL
                    AND pnl_usd IS NOT NULL
                ORDER BY RANDOM()
                LIMIT 5
            """
            
            self.cursor.execute(query)
            signals = self.cursor.fetchall()
            
            if not signals:
                print("    ‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return True
            
            all_passed = True
            for signal in signals:
                signal_id = signal[0]
                coin = signal[1]
                action = signal[2]
                entry_price = Decimal(str(signal[3]))
                exit_price = Decimal(str(signal[4]))
                close_reason = signal[5]
                db_pnl_usd = Decimal(str(signal[6])) if signal[6] else None
                db_pnl_percent = Decimal(str(signal[7])) if signal[7] else None
                position_size = Decimal(str(signal[8]))
                leverage = signal[9]
                tp_percent = Decimal(str(signal[10])) if signal[10] else None
                sl_percent = Decimal(str(signal[11])) if signal[11] else None
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                if action == 'LONG':
                    calc_pnl_percent = ((exit_price - entry_price) / entry_price * 100)
                else:  # SHORT
                    calc_pnl_percent = ((entry_price - exit_price) / entry_price * 100)
                
                calc_pnl_usd = (calc_pnl_percent / 100) * position_size * leverage
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                commission = position_size * self.COMMISSION_RATE * 2
                calc_pnl_usd_with_commission = calc_pnl_usd - commission
                
                print(f"\n    üìù Signal {signal_id} ({coin} {action}):")
                print(f"       Entry: ${entry_price:.4f}, Exit: ${exit_price:.4f}")
                print(f"       Close reason: {close_reason}")
                print(f"       Position: ${position_size}, Leverage: {leverage}x")
                print(f"       DB P&L: ${db_pnl_usd:.2f} ({db_pnl_percent:.2f}%)")
                print(f"       –†–∞—Å—á–µ—Ç–Ω—ã–π P&L: ${calc_pnl_usd:.2f} ({calc_pnl_percent:.2f}%)")
                print(f"       P&L —Å –∫–æ–º–∏—Å—Å–∏–µ–π: ${calc_pnl_usd_with_commission:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (–¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π)
                tolerance = Decimal('1')  # $1 –¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                if db_pnl_usd and abs(calc_pnl_usd_with_commission - db_pnl_usd) > tolerance:
                    print(f"       ‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ ${abs(calc_pnl_usd_with_commission - db_pnl_usd):.2f}")
                    self.warnings.append(f"Signal {signal_id}: P&L —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ ${abs(calc_pnl_usd_with_commission - db_pnl_usd):.2f}")
                    self.test_results['warnings'] += 1
                else:
                    print(f"       ‚úÖ OK")
            
            return all_passed
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
            return False
    
    def test_commission_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π...")
        
        test_cases = [
            {
                'position_size': Decimal('1000'),
                'commission_rate': Decimal('0.001'),  # 0.1%
                'expected_open': Decimal('1'),        # 1000 * 0.001
                'expected_close': Decimal('1'),       # 1000 * 0.001
                'expected_total': Decimal('2'),       # 1 + 1
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è $1000'
            },
            {
                'position_size': Decimal('100'),
                'commission_rate': Decimal('0.001'),
                'expected_open': Decimal('0.1'),
                'expected_close': Decimal('0.1'),
                'expected_total': Decimal('0.2'),
                'description': '–ú–∞–ª–∞—è –ø–æ–∑–∏—Ü–∏—è $100'
            }
        ]
        
        all_passed = True
        for case in test_cases:
            open_commission = case['position_size'] * case['commission_rate']
            close_commission = case['position_size'] * case['commission_rate']
            total_commission = open_commission + close_commission
            
            print(f"    üìù {case['description']}:")
            print(f"       Position: ${case['position_size']}")
            print(f"       Commission rate: {case['commission_rate'] * 100:.2f}%")
            print(f"       Open commission: ${open_commission:.2f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${case['expected_open']})")
            print(f"       Close commission: ${close_commission:.2f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${case['expected_close']})")
            print(f"       Total commission: ${total_commission:.2f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${case['expected_total']})")
            
            if (abs(open_commission - case['expected_open']) > Decimal('0.01') or
                abs(close_commission - case['expected_close']) > Decimal('0.01') or
                abs(total_commission - case['expected_total']) > Decimal('0.01')):
                print(f"       ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏")
                all_passed = False
            else:
                print(f"       ‚úÖ OK")
        
        return all_passed
    
    def test_win_rate_calculation(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ Win Rate"""
        print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ Win Rate...")
        
        test_cases = [
            {
                'wins': 60,
                'losses': 40,
                'expected_win_rate': 60.0,  # 60 / (60 + 40) * 100
                'description': '60 –ø–æ–±–µ–¥, 40 –ø–æ—Ä–∞–∂–µ–Ω–∏–π'
            },
            {
                'wins': 75,
                'losses': 25,
                'expected_win_rate': 75.0,  # 75 / (75 + 25) * 100
                'description': '75 –ø–æ–±–µ–¥, 25 –ø–æ—Ä–∞–∂–µ–Ω–∏–π'
            },
            {
                'wins': 0,
                'losses': 10,
                'expected_win_rate': 0.0,   # 0 / (0 + 10) * 100
                'description': '–¢–æ–ª—å–∫–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è'
            }
        ]
        
        all_passed = True
        for case in test_cases:
            total_closed = case['wins'] + case['losses']
            if total_closed > 0:
                actual_win_rate = (case['wins'] / total_closed) * 100
            else:
                actual_win_rate = 0.0
            
            print(f"    üìù {case['description']}:")
            print(f"       Wins: {case['wins']}, Losses: {case['losses']}")
            print(f"       –†–∞—Å—á–µ—Ç–Ω—ã–π Win Rate: {actual_win_rate:.1f}%")
            print(f"       –û–∂–∏–¥–∞–µ–º—ã–π Win Rate: {case['expected_win_rate']:.1f}%")
            
            if abs(actual_win_rate - case['expected_win_rate']) > 0.1:
                print(f"       ‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç Win Rate")
                all_passed = False
            else:
                print(f"       ‚úÖ OK")
        
        return all_passed
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê")
        print("="*80)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['passed']}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['failed']}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.test_results['warnings']}")
        
        success_rate = (self.test_results['passed'] / self.test_results['total_tests'] * 100 
                       if self.test_results['total_tests'] > 0 else 0)
        print(f"\n   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
            for warning in self.warnings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {warning}")
            if len(self.warnings) > 10:
                print(f"   ... –∏ –µ—â–µ {len(self.warnings) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.test_results['failed'] == 0 and self.test_results['warnings'] == 0:
            print("   ‚úÖ –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            if self.test_results['failed'] > 0:
                print("   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö")
            if self.test_results['warnings'] > 5:
                print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π")
                print("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π –∏–ª–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π")
        
        print("\n" + "="*80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = f"audit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê –†–ê–°–ß–ï–¢–û–í TRADING ASSISTANT\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n")
            f.write(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}\n")
            f.write(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['passed']}\n")
            f.write(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['failed']}\n")
            f.write(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.test_results['warnings']}\n")
            f.write(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n")
            
            if self.errors:
                f.write(f"–û—à–∏–±–∫–∏:\n")
                for error in self.errors:
                    f.write(f"  ‚Ä¢ {error}\n")
            
            if self.warnings:
                f.write(f"\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n")
                for warning in self.warnings:
                    f.write(f"  ‚Ä¢ {warning}\n")
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
    
    def run_full_audit(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–£–î–ò–¢–ê –†–ê–°–ß–ï–¢–û–í")
        print("="*80)
        
        if not self.connect_db():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î. –ê—É–¥–∏—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.run_test("–†–∞—Å—á–µ—Ç P&L –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π", self.test_pnl_calculation_long)
        self.run_test("–†–∞—Å—á–µ—Ç P&L –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–π", self.test_pnl_calculation_short)
        self.run_test("–õ–æ–≥–∏–∫–∞ Trailing Stop", self.test_trailing_stop_logic)
        self.run_test("–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π SL/TP", self.test_stop_loss_take_profit)
        self.run_test("–†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π", self.test_commission_calculation)
        self.run_test("–†–∞—Å—á–µ—Ç Win Rate", self.test_win_rate_calculation)
        self.run_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ë–î", self.test_database_signals)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        self.close_db()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    auditor = TradingCalculationsAuditor()
    auditor.run_full_audit()

if __name__ == "__main__":
    main()