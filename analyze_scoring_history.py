#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ—Ä–∏–Ω–≥–∞
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
Version: 2.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
"""

import os
import sys
import psycopg
from psycopg.rows import dict_row
from datetime import datetime, timedelta, timezone
from decimal import Decimal
import logging
import time
from typing import List, Dict, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('analyze_scoring_history.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DB_CONFIG = {
    'host': '10.8.0.1',
    'port': 5432,
    'dbname': 'fox_crypto',
    'user': 'elcrypto',
    'password': 'LohNeMamont@!21'
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
ANALYSIS_PARAMS = {
    'tp_percent': 4.0,
    'sl_percent': 3.0,
    'position_size': 100.0,
    'leverage': 5,
    'analysis_hours': 48,  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 48 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞
    'entry_delay_minutes': 15  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞
}


class ScoringAnalyzer:
    def __init__(self, db_config: dict):
        self.db_config = db_config
        self.conn = None
        self.processed_count = 0
        self.error_count = 0
        self.new_signals_count = 0
        self.skipped_count = 0

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            conn_string = f"host={self.db_config['host']} port={self.db_config['port']} " \
                          f"dbname={self.db_config['dbname']} user={self.db_config['user']} " \
                          f"password={self.db_config['password']}"
            self.conn = psycopg.connect(conn_string, row_factory=dict_row)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î"""
        if self.conn:
            self.conn.close()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î")

    def get_unprocessed_signals(self, batch_size: int = 10000) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤
        –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º OFFSET, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ NOT EXISTS
        """
        query = """
            SELECT 
                sh.id as scoring_history_id,
                sh.timestamp as signal_timestamp,
                sh.trading_pair_id,
                sh.pair_symbol,
                sh.total_score,
                sh.indicator_score,
                sh.pattern_score,
                sh.combination_score,
                mr.regime as market_regime
            FROM fas.scoring_history sh
            LEFT JOIN LATERAL (
                SELECT regime
                FROM fas.market_regime mr
                WHERE mr.timestamp <= sh.timestamp
                    AND mr.timeframe = '4h'
                ORDER BY mr.timestamp DESC
                LIMIT 1
            ) mr ON true
            WHERE sh.timestamp <= NOW() - INTERVAL '48 hours'
                AND NOT EXISTS (
                    SELECT 1 FROM web.scoring_history_results shr
                    WHERE shr.scoring_history_id = sh.id
                )
            ORDER BY sh.timestamp ASC
            LIMIT %s
        """

        with self.conn.cursor() as cur:
            cur.execute(query, (batch_size,))
            signals = cur.fetchall()

        return signals

    def get_total_unprocessed_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        query = """
            SELECT COUNT(*) as count
            FROM fas.scoring_history sh
            WHERE sh.timestamp <= NOW() - INTERVAL '48 hours'
                AND NOT EXISTS (
                    SELECT 1 FROM web.scoring_history_results shr
                    WHERE shr.scoring_history_id = sh.id
                )
        """

        with self.conn.cursor() as cur:
            cur.execute(query)
            result = cur.fetchone()
            return result['count'] if result else 0

    def determine_signal_type(self, signal: Dict) -> Tuple[str, str]:
        """
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞ –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ total_score
        –í–°–ï —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è!
        """
        total_score = float(signal.get('total_score', 0))

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
        if total_score >= 0:
            return 'BUY', f"Total Score: {total_score:.1f}"
        else:
            return 'SELL', f"Total Score: {total_score:.1f}"

    def get_entry_price(self, trading_pair_id: int, signal_time: datetime,
                        signal_type: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏ –ü–û–°–õ–ï signal_time + 15 –º–∏–Ω—É—Ç
        –ò—Å–ø–æ–ª—å–∑—É–µ–º fas.market_data_aggregated —Å timeframe='15m'
        """
        # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º 15 –º–∏–Ω—É—Ç –∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–≥–Ω–∞–ª–∞
        entry_time = signal_time + timedelta(minutes=ANALYSIS_PARAMS['entry_delay_minutes'])

        query = """
            SELECT 
                timestamp,
                close_price,
                high_price,
                low_price
            FROM fas.market_data_aggregated
            WHERE trading_pair_id = %s
                AND timeframe = '15m'
                AND timestamp >= %s
            ORDER BY timestamp ASC
            LIMIT 1
        """

        try:
            with self.conn.cursor() as cur:
                cur.execute(query, (trading_pair_id, entry_time))
                result = cur.fetchone()

            if result:
                # –î–ª—è BUY –∏—Å–ø–æ–ª—å–∑—É–µ–º high_price, –¥–ª—è SELL - low_price
                if signal_type == 'BUY':
                    entry_price = float(result['high_price'])
                else:  # SELL
                    entry_price = float(result['low_price'])

                return {
                    'entry_price': entry_price,
                    'entry_time': result['timestamp']
                }
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞: {e}")
            return None

    def analyze_signal(self, signal: Dict) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
        try:
            # –í–°–ï–ì–î–ê –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (—Ç–µ–ø–µ—Ä—å –Ω–µ—Ç NO_SIGNAL)
            signal_type, signal_criteria = self.determine_signal_type(signal)

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º 15-–º–∏–Ω—É—Ç–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            entry_data = self.get_entry_price(
                signal['trading_pair_id'],
                signal['signal_timestamp'],
                signal_type
            )

            if not entry_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –¥–ª—è {signal['pair_symbol']} @ {signal['signal_timestamp']}")
                self.skipped_count += 1
                return None

            entry_price = entry_data['entry_price']
            actual_entry_time = entry_data['entry_time']

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∏–∑ market_data_aggregated –∑–∞ 48 —á–∞—Å–æ–≤
            history_query = """
                SELECT 
                    timestamp,
                    close_price,
                    high_price,
                    low_price
                FROM fas.market_data_aggregated
                WHERE trading_pair_id = %s
                    AND timeframe = '15m'
                    AND timestamp >= %s
                    AND timestamp <= %s + INTERVAL '48 hours'
                ORDER BY timestamp ASC
            """

            with self.conn.cursor() as cur:
                cur.execute(history_query, (
                    signal['trading_pair_id'],
                    actual_entry_time,
                    actual_entry_time
                ))
                history = cur.fetchall()

            if not history or len(history) < 10:  # –ú–∏–Ω–∏–º—É–º 10 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {signal['pair_symbol']}")
                self.skipped_count += 1
                return None

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º high/low
            result = self.process_price_history(
                signal_type,
                entry_price,
                history,
                actual_entry_time
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'scoring_history_id': signal['scoring_history_id'],
                'signal_timestamp': signal['signal_timestamp'],
                'pair_symbol': signal['pair_symbol'],
                'trading_pair_id': signal['trading_pair_id'],
                'market_regime': signal['market_regime'],
                'total_score': float(signal['total_score']),
                'indicator_score': float(signal['indicator_score']),
                'pattern_score': float(signal['pattern_score']),
                'combination_score': float(signal.get('combination_score', 0)),
                'signal_type': signal_type,
                'signal_criteria': signal_criteria,
                'entry_price': entry_price,
                **result
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ {signal['pair_symbol']}: {e}")
            self.error_count += 1
            return None

    def process_price_history(self, signal_type: str, entry_price: float,
                              history: List[Dict], actual_entry_time) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º high/low –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        """
        tp_percent = ANALYSIS_PARAMS['tp_percent']
        sl_percent = ANALYSIS_PARAMS['sl_percent']
        position_size = ANALYSIS_PARAMS['position_size']
        leverage = ANALYSIS_PARAMS['leverage']

        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π TP –∏ SL
        if signal_type == 'BUY':
            tp_price = entry_price * (1 + tp_percent / 100)
            sl_price = entry_price * (1 - sl_percent / 100)
        else:  # SELL
            tp_price = entry_price * (1 - tp_percent / 100)
            sl_price = entry_price * (1 + sl_percent / 100)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        is_closed = False
        close_reason = None
        close_price = None
        close_time = None
        hours_to_close = None
        is_win = None

        best_price = entry_price
        worst_price = entry_price
        max_profit_percent = 0
        max_profit_usd = 0
        max_drawdown_percent = 0
        max_drawdown_usd = 0

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É
        for candle in history:
            current_time = candle['timestamp']
            hours_passed = (current_time - actual_entry_time).total_seconds() / 3600

            # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º high/low –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            high_price = float(candle['high_price'])
            low_price = float(candle['low_price'])
            close_price_candle = float(candle['close_price'])

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if signal_type == 'BUY':
                # –î–ª—è BUY: –ª—É—á—à–∞—è —Ü–µ–Ω–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è, —Ö—É–¥—à–∞—è - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
                if high_price > best_price:
                    best_price = high_price
                    temp_profit_percent = ((best_price - entry_price) / entry_price) * 100
                    temp_profit_usd = position_size * (temp_profit_percent / 100) * leverage
                    if temp_profit_usd > max_profit_usd:
                        max_profit_percent = temp_profit_percent
                        max_profit_usd = temp_profit_usd

                if low_price < worst_price:
                    worst_price = low_price
                    temp_loss_percent = ((entry_price - worst_price) / entry_price) * 100
                    temp_loss_usd = position_size * (temp_loss_percent / 100) * leverage
                    if temp_loss_usd > max_drawdown_usd:
                        max_drawdown_percent = temp_loss_percent
                        max_drawdown_usd = temp_loss_usd

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞)
                if not is_closed:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—â–∏—Ç—ã –∫–∞–ø–∏—Ç–∞–ª–∞)
                    if low_price <= sl_price:
                        is_closed = True
                        close_reason = 'stop_loss'
                        is_win = False  # –ü–û–†–ê–ñ–ï–ù–ò–ï
                        close_price = sl_price
                        close_time = current_time
                        hours_to_close = hours_passed
                    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º TP
                    elif high_price >= tp_price:
                        is_closed = True
                        close_reason = 'take_profit'
                        is_win = True  # –ü–û–ë–ï–î–ê
                        close_price = tp_price
                        close_time = current_time
                        hours_to_close = hours_passed

            else:  # SELL
                # –î–ª—è SELL: –ª—É—á—à–∞—è —Ü–µ–Ω–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è, —Ö—É–¥—à–∞—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è
                if low_price < best_price:
                    best_price = low_price
                    temp_profit_percent = ((entry_price - best_price) / entry_price) * 100
                    temp_profit_usd = position_size * (temp_profit_percent / 100) * leverage
                    if temp_profit_usd > max_profit_usd:
                        max_profit_percent = temp_profit_percent
                        max_profit_usd = temp_profit_usd

                if high_price > worst_price:
                    worst_price = high_price
                    temp_loss_percent = ((worst_price - entry_price) / entry_price) * 100
                    temp_loss_usd = position_size * (temp_loss_percent / 100) * leverage
                    if temp_loss_usd > max_drawdown_usd:
                        max_drawdown_percent = temp_loss_percent
                        max_drawdown_usd = temp_loss_usd

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞)
                if not is_closed:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—â–∏—Ç—ã –∫–∞–ø–∏—Ç–∞–ª–∞)
                    if high_price >= sl_price:
                        is_closed = True
                        close_reason = 'stop_loss'
                        is_win = False  # –ü–û–†–ê–ñ–ï–ù–ò–ï
                        close_price = sl_price
                        close_time = current_time
                        hours_to_close = hours_passed
                    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º TP
                    elif low_price <= tp_price:
                        is_closed = True
                        close_reason = 'take_profit'
                        is_win = True  # –ü–û–ë–ï–î–ê
                        close_price = tp_price
                        close_time = current_time
                        hours_to_close = hours_passed

            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
            if is_closed:
                break

        # –ï—Å–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –∑–∞ 48 —á–∞—Å–æ–≤
        if not is_closed:
            is_closed = True
            close_reason = 'timeout'
            is_win = None  # –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù–û –¥–ª—è timeout
            close_price = float(history[-1]['close_price'])
            close_time = history[-1]['timestamp']
            hours_to_close = 48.0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π P&L
        if signal_type == 'SELL':
            final_pnl_percent = ((entry_price - close_price) / entry_price) * 100
        else:  # BUY
            final_pnl_percent = ((close_price - entry_price) / entry_price) * 100

        final_pnl_usd = position_size * (final_pnl_percent / 100) * leverage

        return {
            'best_price': best_price,
            'worst_price': worst_price,
            'close_price': close_price,
            'is_closed': is_closed,
            'close_reason': close_reason,
            'is_win': is_win,
            'close_time': close_time,
            'hours_to_close': hours_to_close,
            'pnl_percent': final_pnl_percent,
            'pnl_usd': final_pnl_usd,
            'max_potential_profit_percent': max_profit_percent,
            'max_potential_profit_usd': max_profit_usd,
            'max_drawdown_percent': max_drawdown_percent,
            'max_drawdown_usd': max_drawdown_usd,
            'tp_percent': tp_percent,
            'sl_percent': sl_percent,
            'position_size': position_size,
            'leverage': leverage,
            'analysis_end_time': actual_entry_time + timedelta(hours=48)
        }

    def save_results(self, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π is_win"""
        if not results:
            return

        insert_query = """
            INSERT INTO web.scoring_history_results (
                scoring_history_id, signal_timestamp, pair_symbol, trading_pair_id,
                market_regime, total_score, indicator_score, pattern_score, combination_score,
                signal_type, signal_criteria,
                entry_price, best_price, worst_price, close_price,
                is_closed, close_reason, is_win, close_time, hours_to_close,
                pnl_percent, pnl_usd,
                max_potential_profit_percent, max_potential_profit_usd,
                max_drawdown_percent, max_drawdown_usd,
                tp_percent, sl_percent, position_size, leverage,
                analysis_end_time
            ) VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
                %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (scoring_history_id) DO NOTHING
        """

        saved_count = 0
        with self.conn.cursor() as cur:
            for result in results:
                try:
                    cur.execute(insert_query, (
                        result['scoring_history_id'],
                        result['signal_timestamp'],
                        result['pair_symbol'],
                        result['trading_pair_id'],
                        result['market_regime'],
                        result['total_score'],
                        result['indicator_score'],
                        result['pattern_score'],
                        result['combination_score'],
                        result['signal_type'],
                        result['signal_criteria'],
                        result['entry_price'],
                        result['best_price'],
                        result['worst_price'],
                        result['close_price'],
                        result['is_closed'],
                        result['close_reason'],
                        result['is_win'],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º is_win
                        result['close_time'],
                        result['hours_to_close'],
                        result['pnl_percent'],
                        result['pnl_usd'],
                        result['max_potential_profit_percent'],
                        result['max_potential_profit_usd'],
                        result['max_drawdown_percent'],
                        result['max_drawdown_usd'],
                        result['tp_percent'],
                        result['sl_percent'],
                        result['position_size'],
                        result['leverage'],
                        result['analysis_end_time']
                    ))
                    saved_count += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {result['pair_symbol']}: {e}")
                    self.error_count += 1

        self.conn.commit()
        self.new_signals_count += saved_count
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ {len(results)}")

    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_query = """
                SELECT 
                    COUNT(*) as total_signals,
                    COUNT(CASE WHEN signal_type = 'BUY' THEN 1 END) as buy_signals,
                    COUNT(CASE WHEN signal_type = 'SELL' THEN 1 END) as sell_signals,
                    COUNT(CASE WHEN is_win = true THEN 1 END) as wins,
                    COUNT(CASE WHEN is_win = false THEN 1 END) as losses,
                    COUNT(CASE WHEN is_win IS NULL THEN 1 END) as timeouts,
                    AVG(pnl_usd) as avg_pnl,
                    SUM(pnl_usd) as total_pnl,
                    AVG(CASE WHEN is_win = true THEN pnl_usd END) as avg_win_profit,
                    AVG(CASE WHEN is_win = false THEN pnl_usd END) as avg_loss,
                    MAX(pnl_usd) as max_profit,
                    MIN(pnl_usd) as max_loss,
                    AVG(max_potential_profit_usd) as avg_max_potential,
                    AVG(hours_to_close) FILTER (WHERE close_reason != 'timeout') as avg_hours_to_close
                FROM web.scoring_history_results
                WHERE processed_at >= NOW() - INTERVAL '1 day'
            """

            with self.conn.cursor() as cur:
                cur.execute(stats_query)
                stats = cur.fetchone()

            logger.info("=" * 70)
            logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê:")
            logger.info("=" * 70)

            if stats and stats['total_signals'] > 0:
                logger.info(f"üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}")
                logger.info(
                    f"   ‚îú‚îÄ BUY: {stats['buy_signals']} ({stats['buy_signals'] / stats['total_signals'] * 100:.1f}%)")
                logger.info(
                    f"   ‚îî‚îÄ SELL: {stats['sell_signals']} ({stats['sell_signals'] / stats['total_signals'] * 100:.1f}%)")

                logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                logger.info(f"   ‚îú‚îÄ –ü–æ–±–µ–¥—ã (TP): {stats['wins']}")
                logger.info(f"   ‚îú‚îÄ –ü–æ—Ä–∞–∂–µ–Ω–∏—è (SL): {stats['losses']}")
                logger.info(f"   ‚îî‚îÄ –¢–∞–π–º–∞—É—Ç—ã: {stats['timeouts']}")

                if stats['wins'] and stats['losses']:
                    win_rate = stats['wins'] / (stats['wins'] + stats['losses']) * 100
                    logger.info(f"\nüèÜ Win Rate: {win_rate:.1f}%")

                    if stats['avg_win_profit'] and stats['avg_loss']:
                        profit_factor = abs(stats['avg_win_profit'] / stats['avg_loss'])
                        logger.info(f"üìä Profit Factor: {profit_factor:.2f}")

                logger.info(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
                logger.info(f"   ‚îú‚îÄ –û–±—â–∏–π P&L: ${stats['total_pnl']:.2f}")
                logger.info(f"   ‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π P&L: ${stats['avg_pnl']:.2f}")
                logger.info(f"   ‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç (WIN): ${stats['avg_win_profit']:.2f}" if stats[
                    'avg_win_profit'] else "   ‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç (WIN): N/A")
                logger.info(f"   ‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ (LOSS): ${stats['avg_loss']:.2f}" if stats[
                    'avg_loss'] else "   ‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ (LOSS): N/A")
                logger.info(f"   ‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${stats['max_profit']:.2f}" if stats[
                    'max_profit'] else "   ‚îú‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: N/A")
                logger.info(f"   ‚îî‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${stats['max_loss']:.2f}" if stats[
                    'max_loss'] else "   ‚îî‚îÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: N/A")

                if stats['avg_hours_to_close']:
                    logger.info(f"\n‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {stats['avg_hours_to_close']:.1f} —á–∞—Å–æ–≤")

                logger.info(f"\nüìà –°—Ä–µ–¥–Ω–∏–π –º–∞–∫—Å. –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${stats['avg_max_potential']:.2f}" if stats[
                    'avg_max_potential'] else "\nüìà –°—Ä–µ–¥–Ω–∏–π –º–∞–∫—Å. –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: N/A")
            else:
                logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            logger.info("=" * 70)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –í–°–ï–• –∑–∞–ø–∏—Å–µ–π"""
        start_time = datetime.now()
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ—Ä–∏–Ω–≥–∞")
        logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")

        try:
            self.connect()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            total_unprocessed = self.get_total_unprocessed_count()

            if total_unprocessed == 0:
                logger.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            logger.info(f"üìä –í—Å–µ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {total_unprocessed}")
            logger.info(f"üì¶ –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10000 –∑–∞–ø–∏—Å–µ–π")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_size = 10000
            save_batch_size = 100
            batch_number = 0
            total_processed_in_run = 0
            previous_unprocessed = total_unprocessed
            no_progress_counter = 0

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–∞–º–∏
            # –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º offset, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –≤—ã–±–æ—Ä–∫–∏
            while True:
                batch_number += 1

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                current_unprocessed = self.get_total_unprocessed_count()

                if current_unprocessed == 0:
                    logger.info("‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                    break

                logger.info(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ #{batch_number}")
                logger.info(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {current_unprocessed}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç (–≤—Å–µ–≥–¥–∞ –±–µ–∑ offset!)
                signals = self.get_unprocessed_signals(batch_size)

                if not signals:
                    logger.info(f"‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    break

                logger.info(f"üìä –í –ø–∞–∫–µ—Ç–µ #{batch_number}: {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ –ø–∞–∫–µ—Ç–µ
                results = []
                batch_processed = 0

                for i, signal in enumerate(signals):
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–Ω—É—Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞
                    if i % 100 == 0 and i > 0:
                        progress = (i / len(signals)) * 100
                        total_progress = ((total_processed_in_run + i) / total_unprocessed) * 100
                        logger.info(
                            f"‚è≥ –ü–∞–∫–µ—Ç #{batch_number}: {i}/{len(signals)} ({progress:.1f}%) | –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_progress:.1f}%")

                    result = self.analyze_signal(signal)
                    if result:
                        results.append(result)
                        self.processed_count += 1
                        batch_processed += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—á–∫–∞–º–∏
                    if len(results) >= save_batch_size:
                        self.save_results(results)
                        results = []

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–∞
                if results:
                    self.save_results(results)

                total_processed_in_run += batch_processed
                logger.info(f"‚úÖ –ü–∞–∫–µ—Ç #{batch_number} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {batch_processed} –∏–∑ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")

                # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ø–æ–ª—É—á–∏–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                if batch_processed < len(signals):
                    skipped_in_batch = len(signals) - batch_processed
                    logger.warning(f"‚ö†Ô∏è –í –ø–∞–∫–µ—Ç–µ #{batch_number} –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_in_batch} —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")

                # –ó–ê–©–ò–¢–ê –û–¢ –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–Ø
                # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –ø–∞–∫–µ—Ç–∞
                if current_unprocessed == previous_unprocessed:
                    no_progress_counter += 1
                    if no_progress_counter >= 3:
                        logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {current_unprocessed} –∑–∞–ø–∏—Å–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
                        logger.warning(f"   –í–µ—Ä–æ—è—Ç–Ω–æ, –¥–ª—è –Ω–∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ market_data_aggregated")

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        with self.conn.cursor() as cur:
                            cur.execute("""
                                SELECT DISTINCT pair_symbol, COUNT(*) as count
                                FROM fas.scoring_history sh
                                WHERE sh.timestamp <= NOW() - INTERVAL '48 hours'
                                    AND NOT EXISTS (
                                        SELECT 1 FROM web.scoring_history_results shr
                                        WHERE shr.scoring_history_id = sh.id
                                    )
                                GROUP BY pair_symbol
                                ORDER BY count DESC
                                LIMIT 10
                            """)
                            problem_pairs = cur.fetchall()

                            logger.warning("   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã:")
                            for pair in problem_pairs:
                                logger.warning(f"     - {pair['pair_symbol']}: {pair['count']} –∑–∞–ø–∏—Å–µ–π")
                        break
                else:
                    no_progress_counter = 0
                    previous_unprocessed = current_unprocessed

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å)
                if current_unprocessed > batch_size and batch_processed > 0:
                    logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...")
                    time.sleep(2)

            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            logger.info("\n" + "=" * 70)
            logger.info("üìã –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:")
            logger.info("=" * 70)
            logger.info(f"üìä –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {total_unprocessed} —Å–∏–≥–Ω–∞–ª–æ–≤")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_count}")
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.new_signals_count}")
            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö): {self.skipped_count}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.error_count}")
            logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {batch_number}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥ ({duration / 60:.1f} –º–∏–Ω—É—Ç)")

            if self.processed_count > 0:
                logger.info(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.processed_count / duration:.1f} —Å–∏–≥–Ω–∞–ª–æ–≤/—Å–µ–∫")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            final_unprocessed = self.get_total_unprocessed_count()
            if final_unprocessed > 0:
                logger.warning(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {final_unprocessed}")
                logger.warning(f"   –≠—Ç–æ –∑–∞–ø–∏—Å–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ market_data_aggregated")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º
                with self.conn.cursor() as cur:
                    cur.execute("""
                        SELECT 
                            pair_symbol,
                            COUNT(*) as count,
                            MIN(timestamp) as min_date,
                            MAX(timestamp) as max_date
                        FROM fas.scoring_history sh
                        WHERE sh.timestamp <= NOW() - INTERVAL '48 hours'
                            AND NOT EXISTS (
                                SELECT 1 FROM web.scoring_history_results shr
                                WHERE shr.scoring_history_id = sh.id
                            )
                        GROUP BY pair_symbol
                        ORDER BY count DESC
                    """)
                    unprocessed_pairs = cur.fetchall()

                    logger.warning("\n   –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º:")
                    for pair in unprocessed_pairs[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
                        logger.warning(
                            f"     {pair['pair_symbol']:20s}: {pair['count']:5d} –∑–∞–ø–∏—Å–µ–π ({pair['min_date'].strftime('%Y-%m-%d')} - {pair['max_date'].strftime('%Y-%m-%d')})")

            logger.info("=" * 70)

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            self.print_statistics()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            self.disconnect()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        analyzer = ScoringAnalyzer(DB_CONFIG)
        analyzer.run()
    except KeyboardInterrupt:
        logger.info("\n‚õî –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()