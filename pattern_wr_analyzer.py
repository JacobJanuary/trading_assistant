#!/usr/bin/env python3
"""
Pattern Win Rate Analyzer v1.0
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–π
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""

import os
import sys
import psycopg
from psycopg.rows import dict_row
from datetime import datetime, timedelta, timezone
from decimal import Decimal
import logging
import time
from typing import List, Dict, Optional, Tuple
import numpy as np
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor, as_completed
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('pattern_wr_analyzer.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ production)
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'dbname': os.getenv('DB_NAME', 'fox_crypto'),
    'user': os.getenv('DB_USER', 'elcrypto'),
    'password': os.getenv('DB_PASSWORD', 'LohNeMamont@!21')
}


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
@dataclass
class TradingParams:
    tp_percent: float = 4.0
    sl_percent: float = 3.0
    position_size: float = 100.0
    leverage: int = 5
    analysis_hours: int = 48
    entry_delay_minutes: int = 15
    min_candles_required: int = 10
    batch_size: int = 5000
    parallel_workers: int = 4


PARAMS = TradingParams()


class PatternWinRateAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""

    def __init__(self, db_config: dict, params: TradingParams):
        self.db_config = db_config
        self.params = params
        self.conn = None
        self.stats = {
            'processed': 0,
            'errors': 0,
            'no_data': 0,
            'analyzed': 0
        }

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            conn_string = " ".join([f"{k}={v}" for k, v in self.db_config.items()])
            self.conn = psycopg.connect(
                conn_string,
                row_factory=dict_row,
                prepare_threshold=10,  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ prepared statements
                options='-c statement_timeout=30000'  # 30 —Å–µ–∫ timeout
            )
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.conn:
            self.conn.close()
            logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î")

    def create_result_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        create_table_query = """
        CREATE TABLE IF NOT EXISTS fas.test_patterns_wr (
            id BIGINT PRIMARY KEY,
            trading_pair_id INTEGER NOT NULL,
            timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
            pattern_type VARCHAR(100) NOT NULL,
            timeframe VARCHAR(10) NOT NULL,
            strength DECIMAL(10,2),
            confidence DECIMAL(10,2),
            score_impact DECIMAL(10,2),
            details JSONB,
            trigger_values JSONB,

            -- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è SHORT
            sell_entry_price DECIMAL(20,8),
            sell_tp_price DECIMAL(20,8),
            sell_sl_price DECIMAL(20,8),
            sell_tp BOOLEAN DEFAULT FALSE,
            sell_sl BOOLEAN DEFAULT FALSE,
            sell_result BOOLEAN,  -- true=TP, false=SL, null=timeout
            sell_close_price DECIMAL(20,8),
            sell_close_time TIMESTAMP WITH TIME ZONE,
            sell_pnl_percent DECIMAL(10,4),
            sell_max_profit_percent DECIMAL(10,4),
            sell_max_drawdown_percent DECIMAL(10,4),

            -- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è LONG
            buy_entry_price DECIMAL(20,8),
            buy_tp_price DECIMAL(20,8),
            buy_sl_price DECIMAL(20,8),
            buy_tp BOOLEAN DEFAULT FALSE,
            buy_sl BOOLEAN DEFAULT FALSE,
            buy_result BOOLEAN,  -- true=TP, false=SL, null=timeout
            buy_close_price DECIMAL(20,8),
            buy_close_time TIMESTAMP WITH TIME ZONE,
            buy_pnl_percent DECIMAL(10,4),
            buy_max_profit_percent DECIMAL(10,4),
            buy_max_drawdown_percent DECIMAL(10,4),

            -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            analysis_completed BOOLEAN DEFAULT FALSE,
            has_sufficient_data BOOLEAN DEFAULT TRUE,
            processed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),

            -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            CONSTRAINT unique_pattern_id UNIQUE(id)
        );

        -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        CREATE INDEX IF NOT EXISTS idx_patterns_wr_pair_time 
            ON fas.test_patterns_wr(trading_pair_id, timestamp);
        CREATE INDEX IF NOT EXISTS idx_patterns_wr_type 
            ON fas.test_patterns_wr(pattern_type);
        CREATE INDEX IF NOT EXISTS idx_patterns_wr_results 
            ON fas.test_patterns_wr(sell_result, buy_result);
        """

        try:
            with self.conn.cursor() as cur:
                cur.execute(create_table_query)
            self.conn.commit()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ fas.test_patterns_wr —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            raise

    def get_unprocessed_patterns(self, limit: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤"""
        query = """
        SELECT 
            sp.id,
            sp.trading_pair_id,
            sp.timestamp,
            sp.pattern_type,
            sp.timeframe,
            sp.strength,
            sp.confidence,
            sp.score_impact,
            sp.details,
            sp.trigger_values,
            tp.pair_symbol as pair_symbol
        FROM fas.signal_patterns sp
        JOIN public.trading_pairs tp ON sp.trading_pair_id = tp.id
        WHERE sp.timestamp <= NOW() - INTERVAL '48 hours'
            AND NOT EXISTS (
                SELECT 1 FROM fas.test_patterns_wr tpw
                WHERE tpw.id = sp.id AND tpw.analysis_completed = TRUE
            )
        ORDER BY sp.timestamp ASC
        """

        if limit:
            query += f" LIMIT {limit}"

        with self.conn.cursor() as cur:
            cur.execute(query)
            patterns = cur.fetchall()

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(patterns)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        return patterns

    def get_price_data_vectorized(self, trading_pair_id: int,
                                  start_time: datetime,
                                  end_time: datetime) -> Optional[np.ndarray]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ numpy –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤"""
        query = """
        SELECT 
            EXTRACT(EPOCH FROM timestamp) as timestamp_epoch,
            close_price::FLOAT,
            high_price::FLOAT,
            low_price::FLOAT,
            open_price::FLOAT
        FROM fas.market_data_aggregated
        WHERE trading_pair_id = %s
            AND timeframe = '15m'
            AND timestamp >= %s
            AND timestamp <= %s
        ORDER BY timestamp ASC
        """

        try:
            with self.conn.cursor() as cur:
                cur.execute(query, (trading_pair_id, start_time, end_time))
                data = cur.fetchall()

            if len(data) < self.params.min_candles_required:
                return None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            return np.array([
                (row['timestamp_epoch'], row['close_price'],
                 row['high_price'], row['low_price'], row['open_price'])
                for row in data
            ], dtype=[
                ('timestamp', 'f8'),
                ('close', 'f8'),
                ('high', 'f8'),
                ('low', 'f8'),
                ('open', 'f8')
            ])

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def analyze_position_vectorized(self, signal_type: str, entry_price: float,
                                    price_data: np.ndarray) -> Dict:
        """
        –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç numpy –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–≤–µ—á–µ–π
        """
        tp_pct = self.params.tp_percent / 100
        sl_pct = self.params.sl_percent / 100

        if signal_type == 'LONG':
            tp_price = entry_price * (1 + tp_pct)
            sl_price = entry_price * (1 - sl_pct)

            # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TP/SL
            tp_hits = price_data['high'] >= tp_price
            sl_hits = price_data['low'] <= sl_price

            # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
            max_price = np.max(price_data['high'])
            min_price = np.min(price_data['low'])
            max_profit_pct = ((max_price - entry_price) / entry_price) * 100
            max_drawdown_pct = ((entry_price - min_price) / entry_price) * 100

        else:  # SHORT
            tp_price = entry_price * (1 - tp_pct)
            sl_price = entry_price * (1 + sl_pct)

            tp_hits = price_data['low'] <= tp_price
            sl_hits = price_data['high'] >= sl_price

            max_price = np.max(price_data['high'])
            min_price = np.min(price_data['low'])
            max_profit_pct = ((entry_price - min_price) / entry_price) * 100
            max_drawdown_pct = ((max_price - entry_price) / entry_price) * 100

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        result = None
        close_price = None
        close_time = None
        close_idx = None

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SL (–∑–∞—â–∏—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞)
        for i in range(len(price_data)):
            if sl_hits[i]:
                result = False  # SL —Å—Ä–∞–±–æ—Ç–∞–ª
                close_price = sl_price
                close_idx = i
                break
            elif tp_hits[i]:
                result = True  # TP —Å—Ä–∞–±–æ—Ç–∞–ª
                close_price = tp_price
                close_idx = i
                break

        if close_idx is not None:
            close_time = datetime.fromtimestamp(
                price_data['timestamp'][close_idx],
                tz=timezone.utc
            )
        else:
            # Timeout - –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–µ
            close_price = price_data['close'][-1]
            close_time = datetime.fromtimestamp(
                price_data['timestamp'][-1],
                tz=timezone.utc
            )

        # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ P&L
        if signal_type == 'LONG':
            pnl_percent = ((close_price - entry_price) / entry_price) * 100
        else:  # SHORT
            pnl_percent = ((entry_price - close_price) / entry_price) * 100

        return {
            'entry_price': entry_price,
            'tp_price': tp_price,
            'sl_price': sl_price,
            'tp': result is True,
            'sl': result is False,
            'result': result,
            'close_price': close_price,
            'close_time': close_time,
            'pnl_percent': pnl_percent,
            'max_profit_percent': max_profit_pct,
            'max_drawdown_percent': max_drawdown_pct
        }

    def analyze_pattern(self, pattern: Dict) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            entry_time = pattern['timestamp'] + timedelta(minutes=self.params.entry_delay_minutes)
            analysis_end = entry_time + timedelta(hours=self.params.analysis_hours)

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            price_data = self.get_price_data_vectorized(
                pattern['trading_pair_id'],
                entry_time,
                analysis_end
            )

            if price_data is None or len(price_data) == 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern['id']}")
                self.stats['no_data'] += 1
                return self._create_no_data_result(pattern)

            # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–¥—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            # –î–ª—è LONG - high –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏, –¥–ª—è SHORT - low –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏
            long_entry = price_data['high'][0]
            short_entry = price_data['low'][0]

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º LONG –ø–æ–∑–∏—Ü–∏—é
            long_results = self.analyze_position_vectorized(
                'LONG', long_entry, price_data[1:]  # Skip –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é
            short_results = self.analyze_position_vectorized(
                'SHORT', short_entry, price_data[1:]
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'id': pattern['id'],
                'trading_pair_id': pattern['trading_pair_id'],
                'timestamp': pattern['timestamp'],
                'pattern_type': pattern['pattern_type'],
                'timeframe': pattern['timeframe'],
                'strength': float(pattern['strength']) if pattern['strength'] else None,
                'confidence': float(pattern['confidence']) if pattern['confidence'] else None,
                'score_impact': float(pattern['score_impact']) if pattern['score_impact'] else None,
                'details': pattern['details'],
                'trigger_values': pattern['trigger_values'],

                # SHORT —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                'sell_entry_price': short_results['entry_price'],
                'sell_tp_price': short_results['tp_price'],
                'sell_sl_price': short_results['sl_price'],
                'sell_tp': short_results['tp'],
                'sell_sl': short_results['sl'],
                'sell_result': short_results['result'],
                'sell_close_price': short_results['close_price'],
                'sell_close_time': short_results['close_time'],
                'sell_pnl_percent': short_results['pnl_percent'],
                'sell_max_profit_percent': short_results['max_profit_percent'],
                'sell_max_drawdown_percent': short_results['max_drawdown_percent'],

                # LONG —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                'buy_entry_price': long_results['entry_price'],
                'buy_tp_price': long_results['tp_price'],
                'buy_sl_price': long_results['sl_price'],
                'buy_tp': long_results['tp'],
                'buy_sl': long_results['sl'],
                'buy_result': long_results['result'],
                'buy_close_price': long_results['close_price'],
                'buy_close_time': long_results['close_time'],
                'buy_pnl_percent': long_results['pnl_percent'],
                'buy_max_profit_percent': long_results['max_profit_percent'],
                'buy_max_drawdown_percent': long_results['max_drawdown_percent'],

                'analysis_completed': True,
                'has_sufficient_data': True
            }

            self.stats['analyzed'] += 1
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern['id']}: {e}")
            self.stats['errors'] += 1
            return None

    def _create_no_data_result(self, pattern: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'id': pattern['id'],
            'trading_pair_id': pattern['trading_pair_id'],
            'timestamp': pattern['timestamp'],
            'pattern_type': pattern['pattern_type'],
            'timeframe': pattern['timeframe'],
            'strength': float(pattern['strength']) if pattern['strength'] else None,
            'confidence': float(pattern['confidence']) if pattern['confidence'] else None,
            'score_impact': float(pattern['score_impact']) if pattern['score_impact'] else None,
            'details': pattern['details'],
            'trigger_values': pattern['trigger_values'],
            'analysis_completed': True,
            'has_sufficient_data': False
        }

    def save_results_batch(self, results: List[Dict]):
        """–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º COPY –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if not results:
            return

        insert_query = """
        INSERT INTO fas.test_patterns_wr (
            id, trading_pair_id, timestamp, pattern_type, timeframe,
            strength, confidence, score_impact, details, trigger_values,
            sell_entry_price, sell_tp_price, sell_sl_price,
            sell_tp, sell_sl, sell_result, sell_close_price, sell_close_time,
            sell_pnl_percent, sell_max_profit_percent, sell_max_drawdown_percent,
            buy_entry_price, buy_tp_price, buy_sl_price,
            buy_tp, buy_sl, buy_result, buy_close_price, buy_close_time,
            buy_pnl_percent, buy_max_profit_percent, buy_max_drawdown_percent,
            analysis_completed, has_sufficient_data
        ) VALUES %s
        ON CONFLICT (id) DO UPDATE SET
            sell_result = EXCLUDED.sell_result,
            buy_result = EXCLUDED.buy_result,
            sell_pnl_percent = EXCLUDED.sell_pnl_percent,
            buy_pnl_percent = EXCLUDED.buy_pnl_percent,
            processed_at = NOW()
        """

        try:
            with self.conn.cursor() as cur:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                values = []
                for r in results:
                    values.append((
                        r['id'], r['trading_pair_id'], r['timestamp'],
                        r['pattern_type'], r['timeframe'],
                        r.get('strength'), r.get('confidence'), r.get('score_impact'),
                        json.dumps(r['details']) if r['details'] else None,
                        json.dumps(r['trigger_values']) if r['trigger_values'] else None,
                        r.get('sell_entry_price'), r.get('sell_tp_price'), r.get('sell_sl_price'),
                        r.get('sell_tp', False), r.get('sell_sl', False), r.get('sell_result'),
                        r.get('sell_close_price'), r.get('sell_close_time'),
                        r.get('sell_pnl_percent'), r.get('sell_max_profit_percent'),
                        r.get('sell_max_drawdown_percent'),
                        r.get('buy_entry_price'), r.get('buy_tp_price'), r.get('buy_sl_price'),
                        r.get('buy_tp', False), r.get('buy_sl', False), r.get('buy_result'),
                        r.get('buy_close_price'), r.get('buy_close_time'),
                        r.get('buy_pnl_percent'), r.get('buy_max_profit_percent'),
                        r.get('buy_max_drawdown_percent'),
                        r.get('analysis_completed', False), r.get('has_sufficient_data', True)
                    ))

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º execute_values –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏
                from psycopg.extras import execute_values
                execute_values(cur, insert_query, values)

            self.conn.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            self.conn.rollback()
            raise

    def process_patterns_parallel(self, patterns: List[Dict]):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
        results = []

        with ThreadPoolExecutor(max_workers=self.params.parallel_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            future_to_pattern = {
                executor.submit(self.analyze_pattern, pattern): pattern
                for pattern in patterns
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            for future in as_completed(future_to_pattern):
                pattern = future_to_pattern[future]
                try:
                    result = future.result(timeout=30)
                    if result:
                        results.append(result)
                        self.stats['processed'] += 1

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏
                    if len(results) >= 100:
                        self.save_results_batch(results)
                        results = []

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {pattern['id']}: {e}")
                    self.stats['errors'] += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if results:
            self.save_results_batch(results)

    def print_statistics(self):
        """–í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞"""
        stats_query = """
        WITH pattern_stats AS (
            SELECT 
                pattern_type,
                COUNT(*) as total_patterns,

                -- LONG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                COUNT(CASE WHEN buy_result = true THEN 1 END) as long_wins,
                COUNT(CASE WHEN buy_result = false THEN 1 END) as long_losses,
                COUNT(CASE WHEN buy_result IS NULL AND has_sufficient_data THEN 1 END) as long_timeouts,
                AVG(CASE WHEN buy_result IS NOT NULL THEN buy_pnl_percent END) as avg_long_pnl,
                MAX(buy_pnl_percent) as max_long_profit,
                MIN(buy_pnl_percent) as max_long_loss,
                AVG(buy_max_profit_percent) as avg_long_potential,

                -- SHORT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                COUNT(CASE WHEN sell_result = true THEN 1 END) as short_wins,
                COUNT(CASE WHEN sell_result = false THEN 1 END) as short_losses,
                COUNT(CASE WHEN sell_result IS NULL AND has_sufficient_data THEN 1 END) as short_timeouts,
                AVG(CASE WHEN sell_result IS NOT NULL THEN sell_pnl_percent END) as avg_short_pnl,
                MAX(sell_pnl_percent) as max_short_profit,
                MIN(sell_pnl_percent) as max_short_loss,
                AVG(sell_max_profit_percent) as avg_short_potential,

                COUNT(CASE WHEN NOT has_sufficient_data THEN 1 END) as no_data_count

            FROM fas.test_patterns_wr
            WHERE processed_at >= NOW() - INTERVAL '1 day'
            GROUP BY pattern_type
            ORDER BY total_patterns DESC
        ),
        overall_stats AS (
            SELECT 
                COUNT(*) as total_analyzed,
                COUNT(CASE WHEN buy_result = true THEN 1 END) as total_long_wins,
                COUNT(CASE WHEN buy_result = false THEN 1 END) as total_long_losses,
                COUNT(CASE WHEN sell_result = true THEN 1 END) as total_short_wins,
                COUNT(CASE WHEN sell_result = false THEN 1 END) as total_short_losses,
                AVG(buy_pnl_percent) as overall_avg_long_pnl,
                AVG(sell_pnl_percent) as overall_avg_short_pnl
            FROM fas.test_patterns_wr
            WHERE processed_at >= NOW() - INTERVAL '1 day'
                AND has_sufficient_data = true
        )
        SELECT * FROM pattern_stats
        """

        try:
            with self.conn.cursor() as cur:
                cur.execute(stats_query)
                pattern_stats = cur.fetchall()

            logger.info("\n" + "=" * 80)
            logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê WIN RATE –ü–û –ü–ê–¢–¢–ï–†–ù–ê–ú")
            logger.info("=" * 80)

            for stat in pattern_stats:
                pattern = stat['pattern_type']
                total = stat['total_patterns']

                # LONG Win Rate
                long_total = stat['long_wins'] + stat['long_losses']
                long_wr = (stat['long_wins'] / long_total * 100) if long_total > 0 else 0

                # SHORT Win Rate
                short_total = stat['short_wins'] + stat['short_losses']
                short_wr = (stat['short_wins'] / short_total * 100) if short_total > 0 else 0

                logger.info(f"\nüìà –ü–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
                logger.info(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}")
                logger.info(f"   ‚îú‚îÄ LONG Win Rate: {long_wr:.1f}% ({stat['long_wins']}/{long_total})")
                logger.info(f"   ‚îÇ  ‚îú‚îÄ Avg P&L: {stat['avg_long_pnl']:.2f}%" if stat[
                    'avg_long_pnl'] else "   ‚îÇ  ‚îú‚îÄ Avg P&L: N/A")
                logger.info(f"   ‚îÇ  ‚îî‚îÄ Max –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {stat['avg_long_potential']:.2f}%" if stat[
                    'avg_long_potential'] else "   ‚îÇ  ‚îî‚îÄ Max –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: N/A")
                logger.info(f"   ‚îî‚îÄ SHORT Win Rate: {short_wr:.1f}% ({stat['short_wins']}/{short_total})")
                logger.info(f"      ‚îú‚îÄ Avg P&L: {stat['avg_short_pnl']:.2f}%" if stat[
                    'avg_short_pnl'] else "      ‚îú‚îÄ Avg P&L: N/A")
                logger.info(f"      ‚îî‚îÄ Max –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: {stat['avg_short_potential']:.2f}%" if stat[
                    'avg_short_potential'] else "      ‚îî‚îÄ Max –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: N/A")

                if stat['no_data_count'] > 0:
                    logger.info(f"   ‚ö†Ô∏è –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {stat['no_data_count']}")

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cur.execute("SELECT * FROM overall_stats")
            overall = cur.fetchone()

            if overall:
                logger.info("\n" + "=" * 80)
                logger.info("üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
                logger.info("=" * 80)

                total_long = overall['total_long_wins'] + overall['total_long_losses']
                total_short = overall['total_short_wins'] + overall['total_short_losses']

                if total_long > 0:
                    long_wr = (overall['total_long_wins'] / total_long) * 100
                    logger.info(f"LONG:  WR={long_wr:.1f}%, Avg P&L={overall['overall_avg_long_pnl']:.2f}%")

                if total_short > 0:
                    short_wr = (overall['total_short_wins'] / total_short) * 100
                    logger.info(f"SHORT: WR={short_wr:.1f}%, Avg P&L={overall['overall_avg_short_pnl']:.2f}%")

            logger.info("=" * 80)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
        start_time = datetime.now()
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Pattern Win Rate Analyzer v1.0")
        logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")
        logger.info(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: TP={self.params.tp_percent}%, SL={self.params.sl_percent}%")
        logger.info(f"üîß –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {self.params.parallel_workers}")

        try:
            self.connect()
            self.create_result_table()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = self.get_unprocessed_patterns()

            if not patterns:
                logger.info("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(patterns)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            batch_size = self.params.batch_size
            for i in range(0, len(patterns), batch_size):
                batch = patterns[i:i + batch_size]
                batch_num = i // batch_size + 1
                total_batches = (len(patterns) + batch_size - 1) // batch_size

                logger.info(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num}/{total_batches} ({len(batch)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)")
                self.process_patterns_parallel(batch)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                progress = min(100, ((i + len(batch)) / len(patterns)) * 100)
                logger.info(f"‚è≥ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            logger.info("\n" + "=" * 80)
            logger.info("üìã –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò")
            logger.info("=" * 80)
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed']}")
            logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['analyzed']}")
            logger.info(f"‚ö†Ô∏è –ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {self.stats['no_data']}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫ ({duration / 60:.1f} –º–∏–Ω)")

            if self.stats['processed'] > 0:
                logger.info(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {self.stats['processed'] / duration:.1f} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤/—Å–µ–∫")

            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.print_statistics()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise
        finally:
            self.disconnect()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        analyzer = PatternWinRateAnalyzer(DB_CONFIG, PARAMS)
        analyzer.run()
    except KeyboardInterrupt:
        logger.info("\n‚õî –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()